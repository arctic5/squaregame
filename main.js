// Generated by CoffeeScript 1.8.0
(function() {
  var Component, Entity, Player, Sys, currentKey, __count, __entities;

  __entities = [];

  __count = 0;

  currentKey = null;

  Entity = (function() {
    function Entity() {
      this.id = (+new Date()).toString(16) + (Math.random() * 100000000 | 0).toString(16);
      this.components = {};
      __entities.push(this);
      __count++;
    }

    Entity.prototype.addComponent = function(component) {
      return this.components[component.name] = component;
    };

    Entity.prototype.showData = function() {
      this.str = JSON.stringify(this, null, 4);
      console.log(this.str);
      return this.str;
    };

    return Entity;

  })();

  Component = {
    health: function(value) {
      this.name = "health";
      return this.value = value;
    },
    physics: function(x, y, vspeed, hspeed, friction, solid) {
      if (vspeed == null) {
        vspeed = 0;
      }
      if (hspeed == null) {
        hspeed = 0;
      }
      if (friction == null) {
        friction = 1;
      }
      if (solid == null) {
        solid = false;
      }
      this.name = "physics";
      this.x = x;
      this.y = y;
      this.vspeed = Math.min(vspeed, 4);
      this.hspeed = Math.min(hspeed, 4);
      return this.friction = friction;
    },
    sprite: function(frames, xorig, yorig, bbox) {
      this.name = "sprite";
      this.frames = frames;
      this.x = xorig;
      this.y = yorig;
      return this.bbox = bbox([0, frames[0].width, 0, frames[0].height]);
    },
    draw: function() {
      return this.name = "draw";
    },
    controllable: function() {
      return this.name = "controllable";
    }
  };

  Sys = {
    canvas: {
      init: function() {
        var _ref;
        this.canvas = document.getElementById('canvas');
        this.ctx = this.canvas.getContext('2d');
        _ref = [600, 800], this.canvas.width = _ref[0], this.canvas.height = _ref[1];
        return this.rect = this.canvas.getBoundingClientRect();
      },
      clear: function() {
        this.ctx.save();
        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        return this.ctx.restore();
      }
    },
    rendering: function(ent) {
      if (ent.components.draw) {
        Sys.canvas.clear();
        Sys.canvas.ctx.beginPath();
        return Sys.canvas.ctx.fillRect(ent.components.physics.x, ent.components.physics.y, 40, 40);
      }
    },
    input: {
      init: function() {
        return window.addEventListener('keydown', (function(event) {
          return currentKey = event.keyCode;
        }), true);
      }
    },
    playercontrol: function(ent) {
      if (ent.components.physics && ent.components.controllable) {
        switch (currentKey) {
          case 37:
            return ent.components.physics.x -= 5;
          case 39:
            return ent.components.physics.x += 5;
          case 40:
            return ent.components.physics.y += 5;
          case 38:
            return ent.components.physics.y -= 5;
        }
      }
    },
    loop: function() {
      var ent, _i, _len;
      for (_i = 0, _len = __entities.length; _i < _len; _i++) {
        ent = __entities[_i];
        Sys.playercontrol(ent);
        Sys.rendering(ent);
      }
      currentKey = null;
      return setTimeout((function() {
        return requestAnimationFrame(Sys.loop);
      }), 1000 / 30);
    }
  };

  Player = (function() {
    function Player() {
      this.player = new Entity;
      this.player.addComponent(new Component.health(2));
      this.player.addComponent(new Component.physics(0, 0));
      this.player.addComponent(new Component.controllable());
      this.player.addComponent(new Component.draw());
      this.player.showData();
    }

    return Player;

  })();

  new Player;

  Sys.canvas.init();

  Sys.input.init();

  Sys.loop();

}).call(this);
